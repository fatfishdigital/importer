<?php
/**
 * Created by PhpStorm.
 * User: fatfish
 * Date: 13/4/18
 * Time: 3:31 PM
 */

namespace fatfish\importer\controllers;

use craft\web\Controller;
use fatfish\importer\models\FeedMappingModel;
use fatfish\importer\models\FeedModel;
use Craft;
use fatfish\importer\services\FeedMappingService;
use fatfish\importer\services\FeedService;


class FeedController extends Controller
{

    public $name;
    public $feedurl;
    public $feedType;
    public $entryType;
    public $id;
    public $entries_field;
    public $xmlkey;



//
//    public function __construct(string $id = null, Module $module = null, array $config = [])
//    {
//        parent::__construct($id, $module, $config);
//    }



    /**
     * @return array|\yii\web\Response
     */
    public function actionSavefeed()
    {
        $FeedModel = new FeedModel();
        $FeedService = new FeedService();
        $this->id = Craft::$app->request->post('feedId');
        $this->name = Craft::$app->request->post('name');
        $this->feedurl = Craft::$app->request->post('feedUrl');
        $this->feedType = Craft::$app->request->post('feedType');
        $this->entryType = Craft::$app->request->post('entryType');
        $FeedModel->id = (int)$this->id;
        $FeedModel->feedurl = $this->feedurl;
        $FeedModel->name = $this->name;
        $FeedModel->feedtype = $this->feedType;
        $FeedModel->Entrytype = $this->entryType;


        if (is_null($this->id) || empty($this->id)) {

            $FeedService->save_feed($FeedModel);
            $feedmodel = new FeedModel();
            $AllFeedData = $FeedService->get_all_feeds();
            Craft::$app->session->setNotice("Feeds Successfully added");
            return $this->renderTemplate('importer/addfeed', ['feed' => $feedmodel, 'Feeds' => $AllFeedData]);
        } else {
            $FeedService->update_feed($FeedModel);
            $feedmodel = new FeedModel();
            $AllFeedData = $FeedService->get_all_feeds();
            Craft::$app->session->setNotice("Feeds Successfully updated");
            return $this->renderTemplate('importer/addfeed', ['feed' => $feedmodel, 'Feeds' => $AllFeedData]);
        }


        return parent::actions(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array
     */
    public function get_feed_type()
    {
        /*
         * This will fetch the feed list that are saved  and entries custom field.
         *
         *
         *
         *
         */
        $arrayField = [];
        $FeedService = new FeedService();
        $FeedType = $FeedService->feed_type();
        $FeedModel = new FeedModel();
        $FeedModel = $FeedType;

        foreach ($FeedModel as $feedmodel) {


            switch ($feedmodel->feedtype) {

                case 'xml':

                    $xmlParser = new XmlPraser($feedmodel);
                    $listxml = $xmlParser->parse_xml();
                    $this->get_feed_fields($feedmodel->entry_type);
                    $arrayField[] =
                        [
                            'xml' => $listxml,
                            'entries_field' => $this->entries_field,
                            'name'=>$feedmodel->name,
                            'type' => $feedmodel->feedtype,
                            'feedid' =>$feedmodel->id,
                        ];
                    break;

                default:


            }


        }

        return $arrayField;


    }



    /**
     * @param $EntryId
     */
    public function get_feed_fields($EntryId)
    {
        $sectionHandle = Craft::$app->sections->getSectionById($EntryId)->handle;
        $sectionId = Craft::$app->sections->getSectionByHandle($sectionHandle)->getEntryTypes();
        $this->entries_field = Craft::$app->fields->getFieldsByLayoutId((int)$sectionId[0]->sectionId);


    }

        public function actionSavefeedmapping()
        {


	     $FeedMappingModel = new FeedMappingModel();
	     $FeedMapppingService = new FeedMappingService();
	     $FeedMappingModel->id = Craft::$app->request->post('feedid');
	     $FeedMappingModel->feed_type = Craft::$app->request->post('type');
	        $critearea_element='';
	        $requestedparam = Craft::$app->request->post();
	        $entryfield = $requestedparam['entryfield'];
	        $mappedfield = $requestedparam['mappedfield'];

	        if(isset($requestedparam['radio'])) {
		        $critearea_element = $requestedparam['radio'];
	        }


	        for($i=0;$i<sizeof($mappedfield);$i++) {
		        $FeedMappingModel->entries_field = $entryfield[$i];
		        $FeedMappingModel->mapped_field = $mappedfield[$i];
		        if(isset($critearea_element[$i]))
		        {
			        if($critearea_element[$i]==='checked')
			        {
				        $FeedMappingModel->critearea = 1;
			        }


		        }
		        else
		        {
			        $FeedMappingModel->critearea = 0;
		        }

				$FeedMapppingService->save_feed_mapping($FeedMappingModel);
	        }

        }
        public function get_xml_node($url)
        {
			$feedService = new FeedService();
			$Data= [];
        	$result=($feedService->xml_api_element_fetched($url));
        	foreach ($result as $result)
	        {
				$Data[$result] = $result;
	        }
		return $Data;



        }
}